import * as z from "zod";
import type { VideoSettings } from "../types/VideoSettings";

type VideoFormat = VideoSettings["format"];
export const videoFormats: VideoFormat[] = [
	"3g2",
	"3gp",
	"a64",
	"adts",
	"amv",
	"asf",
	"avi",
	"avif",
	"swf",
	"txt",
	"crc",
	"mpd",
	"vob",
	"f4v",
	"fifo",
	"flv",
	"hash",
	"md5",
	"gif",
	"f4m",
	"m3u8",
	"jpg",
	"m4v",
	"ismv",
	"latm",
	"mkv",
	"mov",
	"mp2",
	"mp4",
	"mpg",
	"m1v",
	"m2v",
	"ts",
	"mjpg",
	"mxf",
	"null",
	"oga",
	"ogv",
	"opus",
	"rtp",
	"rtsp",
	"sap",
	"sdl",
	"ism",
	"spx",
	"tee",
	"ttml",
	"webm",
	"webp",
] as const;

type VideoCodec = VideoSettings["codec"];
export const videoCodecs: VideoCodec[] = [
	"a64_multi",
	"a64_multi5",
	"alias_pix",
	"amv",
	"apng",
	"asv1",
	"asv2",
	"av1",
	"avrp",
	"avui",
	"ayuv",
	"bitpacked",
	"bmp",
	"cfhd",
	"cinepak",
	"cljr",
	"dnxhd",
	"dpx",
	"dvvideo",
	"exr",
	"ffv1",
	"ffvhuff",
	"fits",
	"flashsv",
	"flashsv2",
	"flv1",
	"gif",
	"h261",
	"h263",
	"h263p",
	"h264",
	"hdr",
	"hevc",
	"huffyuv",
	"jpeg2000",
	"jpegls",
	"ljpeg",
	"magicyuv",
	"mjpeg",
	"mpeg1video",
	"mpeg2video",
	"mpeg4",
	"msmpeg4v2",
	"msmpeg4v3",
	"msvideo1",
	"pam",
	"pbm",
	"pcx",
	"pfm",
	"pgm",
	"pgmyuv",
	"phm",
	"png",
	"ppm",
	"prores",
	"qoi",
	"qtrle",
	"r10k",
	"r210",
	"rawvideo",
	"roq",
	"rpza",
	"rv10",
	"rv20",
	"sgi",
	"smc",
	"snow",
	"speedhq",
	"sunrast",
	"svq1",
	"targa",
	"theora",
	"tiff",
	"utvideo",
	"v210",
	"v308",
	"v408",
	"v410",
	"vbn",
	"vnull",
	"vp8",
	"vp9",
	"wbmp",
	"webp",
	"wmv1",
	"wmv2",
	"wrapped_avframe",
	"xbm",
	"xface",
	"xwd",
	"y41p",
	"yuv4",
	"zlib",
	"zmbv",
] as const;

type LogoCorner = VideoSettings["logoCorner"];
export const logoCorners: LogoCorner[] = [
	"topLeft",
	"topRight",
	"bottomLeft",
	"bottomRight",
] as const;

export const videoFormSchema = z
	.object({
		inputDirectory: z.string({
			error: "Selecting an input directory is required.",
		}),
		outputDirectory: z.string({
			error: "Selecting an output directory is required.",
		}),
		searchChildFolders: z.boolean(),
		keepChildFoldersStructureInOutputDirectory: z.boolean(),
		minPixelCount: z.number().min(1, "Minimum pixel count can't be lower than 1"),
		addLogo: z.boolean(),
		logoPath: z.string().nullable(),
		logoScale: z
			.number()
			.min(1, "Logo scale can't be lower than 1")
			.max(100, "Logo scale can't be higher than 100"),
		logoXOffsetScale: z.number().max(100, "Logo X offset scale can't be higher than 100"),
		logoYOffsetScale: z.number().max(100, "Logo Y offset scale can't be higher than 100"),
		logoCorner: z.enum(logoCorners),
		shouldConvertFormat: z.boolean(),
		format: z.enum(videoFormats),
		shouldConvertCodec: z.boolean(),
		codec: z.enum(videoCodecs),
		clearFilesInputDirectory: z.boolean(),
		clearFilesOutputDirectory: z.boolean(),
		overwriteExistingFilesOutputDirectory: z.boolean(),
	})
	.refine(
		(data) => {
			if (data.addLogo && (!data.logoPath || data.logoPath.trim() === "")) {
				return false;
			}
			return true;
		},
		{
			error: "Logo path is required when adding a logo",
			path: ["logoPath"],
		},
	);
